#!/usr/bin/env node
var sift = require('sift').default;
var CLApp = require('app-term-kit');
var arrays = require('async-arrays');
var app = new CLApp('ccg', {
    copyright : 'Abbey Hawk Sparrow',
    trademark : 'Abbey Hawk Sparrow',
    copystart : '2014',
    defaults : `{
    // defaults go here.
    "bitdepth": 2,
    //request-as-request, fetch-as-request, axios-as-request
    "requestlib": "request-as-request"
}`
});

var mappable = {
    'magic' : 'mtg',
    'magic the gathering' : 'mtg'
};

var getGame = function(name, cb){
    var game = require('../games/'+name);
    if(!game) throw new Error('missing game:'+name);
    setTimeout(function(){
        cb(null, game);
    }, 0)
}

app.useable(function(err){
    app.config(function(err, conf, writeConfig){
        //if(conf.requestlib) art.use('request', require(conf.requestlib));
        app.command({
            name:'create',
            description: 'create a new deck',
            examples: [[
                '$0 create ', 'make a new deck'
            ]],
            action : function(argv, target, complete){
                getGame(argv.game || 'mtg', function(err, Game){
                    var config = target.split('+').map(function(s){
                        return s.split(':');
                    }).reduce(function(res, parts){
                        if(res[parts[0]]){
                            if(Array.isArray(res[parts[0]])) res[parts[0]].push(parts[0]);
                            else res[parts[0]] = [res[parts[0]], parts[1]];
                        }else{
                            res[parts[0]] = parts[1];
                        }
                        return res;
                    }, {});
                    var results = [];;
                    arrays.forEachEmission(config.set, function(item, index, done){
                        Game.set(item, function(err, r){
                            results = results.concat(r);
                            done();
                        })
                    }, function(){
                        if(argv.filter){
                            var filter = JSON.parse(argv.filter);
                            results = results.filter(sift(filter));
                        }
                        console.log(JSON.stringify(results));
                    })
                });
            }
        });
        app.command({
            name:'list',
            description: 'list cards that match the provided criterion',
            examples: [],
            action : function(argv, target, complete){
                getGame(argv.game || 'mtg', function(err, Game){
                    var config = target.split('+').map(function(s){
                        return s.split(':');
                    }).reduce(function(res, parts){
                        if(res[parts[0]]){
                            if(Array.isArray(res[parts[0]])) res[parts[0]].push(parts[0]);
                            else res[parts[0]] = [res[parts[0]], parts[1]];
                        }else{
                            res[parts[0]] = parts[1];
                        }
                        return res;
                    }, {});
                    var results = [];;
                    arrays.forEachEmission(config.set, function(item, index, done){
                        Game.set(item, function(err, r){
                            results = results.concat(r);
                            done();
                        })
                    }, function(){
                        if(argv.filter){
                            var filter = JSON.parse(argv.filter);
                            results = results.filter(sift(filter));
                        }
                        console.log(JSON.stringify(results));
                    })
                });
            }
        });
        app.command({
            name:'lookup',
            description: 'Show a specific card',
            examples: [[
                '$0 lookup "Serra Angel" ', 'show the `Serra Angel`'
            ]],
            action : function(argv, target, complete){
                getGame(argv.game || 'mtg', function(err, Game){
                    var card = new Game.Card(target);
                    card.renderAscii(function(err, ascii){
                        console.log(ascii);
                    });
                });
            }
        });
        //*
        app.argument('game', 'string','the game to build a deck of', 1, [
            'mtg', 'rage', 'arcadia', 'jyhad'
        ]); //*/
        app.argument('filter', 'string',
            'A Mongo Query Document which describes a subselection across the current one',
            1
        );
        app.help();
        app.header('deck');
        app.footer();
        app.run(function(ex){
            if(ex) throw ex;
        })
    });
});
